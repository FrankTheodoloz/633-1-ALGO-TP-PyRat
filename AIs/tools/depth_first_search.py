# Depth First Search (parcours en profondeur)
from typing import Tuple, List, Dict

Node = Tuple[int, int]


def depth_first_search(graph: List[List[int]], source_node: int) -> None:
    """ Function DFS that prints how the algorithm is visiting nodes """
    visited: List[int] = []  # list of visited nodes

    def depth_first_search_recursive(graph: List[List[int]], current_node: int):
        """ Recursive function that visits neighbors of current_node """
        visited.append(current_node)  # add the current_node as visited
        print(current_node)

        for neighbor in graph[current_node]:  # for each neighbor
            if neighbor not in visited:  # not visited
                depth_first_search_recursive(graph, neighbor)  # invoke recursion
            print("return")

    depth_first_search_recursive(graph, source_node)  # invoke recursive function


def depth_first_search_routing(graph: List[List[int]], source_node: int) -> Dict[int, List[int]]:
    """ Function DFS that returns a dict of routes from source_node to all other nodes """
    visited: List[int] = []  # list of visited nodes
    routes: Dict[int, List[int]] = {}  # dict of routes

    def depth_first_search_recursive(graph: List[List[int]], current_node: int, path: List[int]) -> None:
        """ Recursive function that visits neighbors of current_node """
        visited.append(current_node)  # add the current_node as visited
        routes[current_node] = path  # get the path to the current_node
        # print(current_node, "path :", repr(path))

        for neighbor in graph[current_node]:  # for each neighbor
            if neighbor not in visited:  # not visited
                depth_first_search_recursive(graph, neighbor, path + [neighbor])  # invoke recursion
            # print("return")

    depth_first_search_recursive(graph, source_node, [source_node])  # invoke recursive function

    return routes


# For Pyrat maze
def depth_first_search_routing_maze(graph: Dict[Node, Dict[Node, int]], source_node: Node) -> Dict[Node, List[Node]]:
    """ Function DFS for the maze that returns a dict of routes from source_node to all other nodes """
    visited: List[Node] = []  # list of visited nodes
    routes: Dict[Node, List[Node]] = {}  # dict of routes

    def depth_first_search_recursive(graph: Dict[Node, Dict[Node, int]], current_node: Node, path: List[Node]) -> None:
        """ Recursive function that visits neighbors of current_node """
        visited.append(current_node)  # add the current_node as visited
        routes[current_node] = path  # get the path to the current_node
        # print(current_node, "path :", repr(path))

        for neighbor in graph[current_node]:  # for each neighbor
            if neighbor not in visited:  # not visited
                depth_first_search_recursive(graph, neighbor, path + [neighbor])  # invoke recursion
            # print("return")

    depth_first_search_recursive(graph, source_node, [source_node])  # invoke recursive function

    return routes


'''
Test dept_first_search
'''
# graph = [[1, 2, 5], [0, 2, 5], [0, 1], [4, 5], [3, 5], [0, 1, 3, 4]]
# print(repr(depth_first_search(graph, 0)))
# 0
# 1
# 2
# return
# 5
# 3
# 4
# return
# return
# return
# return
# return
# None

'''
Test dept_first_search_routing
'''
# graph = [[1, 2, 5], [0, 2, 5], [0, 1], [4, 5], [3, 5], [0, 1, 3, 4]]
# print(repr(depth_first_search_routing(graph, 0)))
# {0: [0], 1: [0, 1], 2: [0, 1, 2], 5: [0, 1, 5], 3: [0, 1, 5, 3], 4: [0, 1, 5, 3, 4]}

'''
Test dept_first_search_routing_maze
'''
# maze: Dict[Node, Dict[Node, int]] = \
#     {(0, 0): {(1, 0): 1}, (0, 1): {(0, 2): 1, (1, 1): 1}, (0, 2): {(0, 1): 1}, (0, 3): {(1, 3): 1, (0, 4): 1},
#      (0, 4): {(0, 3): 1, (0, 5): 1}, (0, 5): {(0, 4): 1, (0, 6): 1}, (0, 6): {(1, 6): 1, (0, 5): 1},
#      (1, 0): {(2, 0): 1, (1, 1): 1, (0, 0): 1}, (1, 1): {(1, 0): 1, (0, 1): 1, (1, 2): 1},
#      (1, 2): {(2, 2): 1, (1, 3): 7, (1, 1): 1}, (1, 3): {(0, 3): 1, (1, 2): 7}, (1, 4): {(1, 5): 1},
#      (1, 5): {(1, 6): 1, (2, 5): 1, (1, 4): 1}, (1, 6): {(1, 5): 1, (0, 6): 1},
#      (2, 0): {(1, 0): 1, (3, 0): 1, (2, 1): 1}, (2, 1): {(2, 0): 1}, (2, 2): {(1, 2): 1, (2, 3): 1},
#      (2, 3): {(2, 2): 1}, (2, 4): {(3, 4): 2, (2, 5): 6}, (2, 5): {(3, 5): 1, (1, 5): 1, (2, 4): 6},
#      (2, 6): {(3, 6): 1}, (3, 0): {(2, 0): 1, (4, 0): 1, (3, 1): 1}, (3, 1): {(4, 1): 1, (3, 0): 1},
#      (3, 2): {(4, 2): 2, (3, 3): 1}, (3, 3): {(3, 4): 1, (3, 2): 1}, (3, 4): {(2, 4): 2, (3, 3): 1},
#      (3, 5): {(2, 5): 1, (3, 6): 1}, (3, 6): {(4, 6): 1, (2, 6): 1, (3, 5): 1}, (4, 0): {(3, 0): 1},
#      (4, 1): {(3, 1): 1, (5, 1): 1, (4, 2): 6}, (4, 2): {(3, 2): 2, (4, 1): 6}, (4, 3): {(4, 4): 1},
#      (4, 4): {(5, 4): 1, (4, 3): 1}, (4, 5): {(4, 6): 1}, (4, 6): {(5, 6): 1, (3, 6): 1, (4, 5): 1},
#      (5, 0): {(5, 1): 1, (6, 0): 1}, (5, 1): {(5, 0): 1, (4, 1): 1, (5, 2): 1}, (5, 2): {(5, 1): 1},
#      (5, 3): {(6, 3): 1, (5, 4): 7}, (5, 4): {(4, 4): 1, (5, 3): 7, (5, 5): 1},
#      (5, 5): {(5, 6): 1, (6, 5): 1, (5, 4): 1}, (5, 6): {(4, 6): 1, (5, 5): 1, (6, 6): 1},
#      (6, 0): {(5, 0): 1, (6, 1): 1}, (6, 1): {(6, 2): 1, (6, 0): 1}, (6, 2): {(6, 3): 1, (6, 1): 1},
#      (6, 3): {(5, 3): 1, (6, 2): 1}, (6, 4): {(6, 5): 1}, (6, 5): {(6, 4): 1, (5, 5): 1}, (6, 6): {(5, 6): 1}}
# location: Node = (0, 0)
# print(repr(depth_first_search_routing_maze(maze, location)))
#
# {(0, 0): [(0, 0)],
#  (1, 0): [(0, 0), (1, 0)],
#  (2, 0): [(0, 0), (1, 0), (2, 0)],
#  (3, 0): [(0, 0), (1, 0), (2, 0), (3, 0)],
#  (4, 0): [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)],
#  (3, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1)],
#  (4, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1)],
#  (5, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1)],
#  (5, 0): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0)],
#  (6, 0): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0)],
#  (6, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1)],
#  (6, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2)],
#  (6, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3)],
#  (5, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3)],
#  (5, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4)],
#  (4, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (4, 4)],
#  (4, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (4, 4), (4, 3)],
#  (5, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5)],
#  (5, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6)],
#  (4, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6)],
#  (3, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6)],
#  (2, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (2, 6)],
#  (3, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5)],
#  (2, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5)],
#  (1, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5)],
#  (1, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6)],
#  (0, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6)],
#  (0, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5)],
#  (0, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4)],
#  (0, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3)],
#  (1, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3)],
#  (1, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2)],
#  (2, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2), (2, 2)],
#  (2, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2), (2, 2), (2, 3)],
#  (1, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2), (1, 1)],
#  (0, 1): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2), (1, 1), (0, 1)],
#  (0, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 6), (0, 6), (0, 5), (0, 4), (0, 3),
#           (1, 3), (1, 2), (1, 1), (0, 1), (0, 2)],
#  (1, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (1, 5), (1, 4)],
#  (2, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (2, 4)],
#  (3, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (2, 4), (3, 4)],
#  (3, 3): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (2, 4), (3, 4), (3, 3)],
#  (3, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (2, 4), (3, 4), (3, 3), (3, 2)],
#  (4, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (3, 6), (3, 5), (2, 5), (2, 4), (3, 4), (3, 3), (3, 2), (4, 2)],
#  (4, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (4, 6), (4, 5)],
#  (6, 6): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (5, 6), (6, 6)],
#  (6, 5): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (6, 5)],
#  (6, 4): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 0), (6, 0), (6, 1), (6, 2), (6, 3), (5, 3),
#           (5, 4), (5, 5), (6, 5), (6, 4)], (5, 2): [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (4, 1), (5, 1), (5, 2)],
#  (2, 1): [(0, 0), (1, 0), (2, 0), (2, 1)]}
